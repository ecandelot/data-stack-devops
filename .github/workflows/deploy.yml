name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AIRFLOW_IMAGE: airflow-custom
      TRINO_IMAGE: trino-custom
      AIRFLOW_PORT: ${{ secrets.AIRFLOW_PORT }}
      AIRFLOW_EXECUTOR: ${{ secrets.AIRFLOW_EXECUTOR }}
      AIRFLOW_DB: ${{ secrets.AIRFLOW_DB }}
      AIRFLOW_SECRET: ${{ secrets.AIRFLOW_SECRET }}
      AIRFLOW_USER: ${{ secrets.AIRFLOW_USER }}
      AIRFLOW_PASSWORD: ${{ secrets.AIRFLOW_PASSWORD }}
      AIRFLOW_FIRSTNAME: ${{ secrets.AIRFLOW_FIRSTNAME }}
      AIRFLOW_LASTNAME: ${{ secrets.AIRFLOW_LASTNAME }}
      AIRFLOW_ROLE: ${{ secrets.AIRFLOW_ROLE }}
      AIRFLOW_EMAIL: ${{ secrets.AIRFLOW_EMAIL }}
      TRINO_PORT: ${{ secrets.TRINO_PORT }}
      TRINO_CATALOG_PATH: ${{ secrets.TRINO_CATALOG_PATH }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      AIRFLOW_METRICS_PORT: ${{ secrets.AIRFLOW_METRICS_PORT }}
      NODE_EXPORTER_PORT: ${{ secrets.NODE_EXPORTER_PORT }}
      PROMETHEUS_PORT: ${{ secrets.PROMETHEUS_PORT }}
      GRAFANA_PORT: ${{ secrets.GRAFANA_PORT }}
      GF_SECURITY_ADMIN_PASSWORD: ${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}
      AIRFLOW_METRICS_EXPORTER: ${{ secrets.AIRFLOW_METRICS_EXPORTER }}
      LOKI_PORT: ${{ secrets.LOKI_PORT }}
      FLUENT_BIT_PORT: ${{ secrets.FLUENT_BIT_PORT }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Generate local .env file
      run: |
        cat > .env <<EOF
        AIRFLOW_USER=${{ secrets.AIRFLOW_USER }}
        AIRFLOW_PASSWORD=${{ secrets.AIRFLOW_PASSWORD }}
        AIRFLOW_DB=${{ secrets.AIRFLOW_DB }}
        AIRFLOW_SECRET=${{ secrets.AIRFLOW_SECRET }}
        AIRFLOW_PORT=${{ secrets.AIRFLOW_PORT }}
        AIRFLOW_EXECUTOR=${{ secrets.AIRFLOW_EXECUTOR }}
        AIRFLOW_FIRSTNAME=${{ secrets.AIRFLOW_FIRSTNAME }}
        AIRFLOW_LASTNAME=${{ secrets.AIRFLOW_LASTNAME }}
        AIRFLOW_ROLE=${{ secrets.AIRFLOW_ROLE }}
        AIRFLOW_EMAIL=${{ secrets.AIRFLOW_EMAIL }}
        TRINO_PORT=${{ secrets.TRINO_PORT }}
        TRINO_CATALOG_PATH=${{ secrets.TRINO_CATALOG_PATH }}
        POSTGRES_USER=${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_DB=${{ secrets.POSTGRES_DB }}
        POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
        AIRFLOW_METRICS_PORT=${{ secrets.AIRFLOW_METRICS_PORT }}
        NODE_EXPORTER_PORT=${{ secrets.NODE_EXPORTER_PORT }}
        PROMETHEUS_PORT=${{ secrets.PROMETHEUS_PORT }}
        GRAFANA_PORT=${{ secrets.GRAFANA_PORT }}
        GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}
        AIRFLOW_METRICS_EXPORTER=${{ secrets.AIRFLOW_METRICS_EXPORTER }}
        LOKI_PORT=${{ secrets.LOKI_PORT }}
        FLUENT_BIT_PORT=${{ secrets.FLUENT_BIT_PORT }}
        EOF

    - name: Check formatting with Black (non-blocking)
      continue-on-error: true
      run: |
        pip install black
        black docker/

    - name: Format YAML with Prettier (non-blocking)
      continue-on-error: true
      run: |
        npm install --global prettier
        prettier --write "**/*.{yml,yaml}"

    - name: Cleanup podman locks and containers on remote
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          sudo podman ps -a || true
          sudo podman rm -f $(sudo podman ps -aq) || true
          sudo podman system prune -f || true
          find /run/user/$(id -u)/containers/locks/ -type f -delete || true

    - name: Configure short-name registry resolution
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          sudo mkdir -p /etc/containers
          echo '[registries.search]' | sudo tee /etc/containers/registries.conf
          echo 'registries = ["docker.io"]' | sudo tee -a /etc/containers/registries.conf

    - name: Deploy files to remote host
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        source: "."
        target: "~/stack_data"

    - name: Fix permissions for config files and scripts
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          sudo chmod -R 755 ~/stack_data/docker/loki
          sudo chmod -R 755 ~/stack_data/docker/fluent-bit

    - name: Verify .env on remote server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          ls -l ~/stack_data/.env

    - name: Make all entrypoint.sh scripts executable (safe)
      run: |
        find . -type f -name 'entrypoint.sh' -exec chmod +x {} \;

    - name: Fix permissions for config files and scripts
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          cd ~/stack_data
          sudo chmod -R 755 ./docker/fluent-bit/entrypoint.sh

    - name: Verify and generate Fluent-bit config
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          cd ~/stack_data
          ls -l ./docker/fluent-bit/fluent-bit.conf.template
          cat ./docker/fluent-bit/fluent-bit.conf.template
          sudo chmod +x ./docker/fluent-bit/entrypoint.sh
          ./docker/fluent-bit/entrypoint.sh


    - name: Verify Loki and Fluent-bit config files
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          ls -l ~/stack_data/docker/loki/config.yaml
          cat ~/stack_data/docker/loki/config.yaml

    - name: Build and deploy with podman-compose
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          cd ~/stack_data
          podman-compose down --rmi all -v || echo "Nothing to stop"
          podman-compose --env-file .env up -d --build --no-cache
